1-pt(((95-75)-0)/5.3003, df = 8)
0.002719693*100
sample(c(0, 1), 3800, T, prob=c(20/38, 18/38))
sum(sample(c(0, 1), 3800, T, prob=c(20/38, 18/38)))
sum(sample(c(0, 1), 3800, T, prob=c(20/38, 18/38)))
rbinom(100000,3800,18/38)
sum(sample(c(0, 1), 3800, T, prob=c(20/38, 18/38)))
1-pbinom(1890, 3800, 18/38)
roulette.red=rbinom(100000,3800,18/38)
ggplot(data.frame(),aes(x=roulette.red,y=..density..))+
geom_histogram(bins = 100)+
geom_vline(xintercept = 1890, col="blue")
library(ggplot2)
ggplot(data.frame(),aes(x=roulette.red,y=..density..))+
geom_histogram(bins = 100)+
geom_vline(xintercept = 1890, col="blue")
1-pbinom(1889, 3800, 18/38)
knitr::opts_chunk$set(echo = TRUE)
# Or using binomial, the true answer
print("c) This is the true p-value from the binomial.", 1-pbinom(1889,3800,18/38))
print("b) A histogram.")
ggplot(data,aes(x=roulette.red,y=..density..))+
geom_histogram(bins = 100)+
geom_vline(xintercept = 1890, col="blue")
knitr::opts_chunk$set(echo = TRUE)
## add any packages you plan to use in the markdown file
library(ggplot2)# adding this since we need it to make a histogram further down.
roulette.red=rbinom(100000,3800,18/38)
data=data.frame(roulette.red)
print("a) This is a simulated p-value.")
mean(roulette.red>=1890)# simulated p-value
print("b) A histogram.")
ggplot(data,aes(x=roulette.red,y=..density..))+
geom_histogram(bins = 100)+
geom_vline(xintercept = 1890, col="blue")
# Or using binomial, the true answer
print("c) This is the true p-value from the binomial.")
1-pbinom(1889,3800,18/38)
# Using box model
avg=18/38
std=(1-0)*sqrt(18/38*20/38)
EV=3800*avg
SE=sqrt(3800)*std
z=(1889.5-EV)/SE
print("d) This is a p-value using normal approximation.")
1-pnorm(z)
print("b) A histogram.")
ggplot(data,aes(x=roulette.red,y=..density..))+
geom_histogram(bins = 100)+
geom_vline(xintercept = 1890, col="blue")
roulette.red=rbinom(100000,3800,18/38)
data=data.frame(roulette.red)
print("a) This is a simulated p-value.")
print("b) A histogram.")
ggplot(data,aes(x=roulette.red,y=..density..))+
geom_histogram(bins = 100)+
geom_vline(xintercept = 1890, col="blue")
roulette.red=rbinom(100000,3800,18/38)
data=data.frame(roulette.red)
print("a) This is a simulated p-value.")
roulette.red=rbinom(100000,3800,18/38)
data=data.frame(roulette.red)
print("a) This is a simulated p-value.")
mean(roulette.red>=1890)# simulated p-value
print("b) A histogram.")
ggplot(data,aes(x=roulette.red,y=..density..))+
geom_histogram(bins = 100)+
geom_vline(xintercept = 1890, col="blue")
knitr::opts_chunk$set(echo = TRUE)
box = c(1, 2, 3, 4, 5, 6)
avg_box = mean(box)
sum(sample(box, 10, replace = TRUE))
box = c(1, 2, 3, 4, 5, 6)
avg_box = mean(box)
mean((sample(box, 10, replace = TRUE)))
ggplot(data.frame(), ((sample(box, 10, replace = TRUE))))+
geom_histogram()
library(ggplot2)
ggplot(data.frame(), ((sample(box, 10, replace = TRUE))))+
geom_histogram()
library(ggplot2)
ggplot(data.frame(), ((sample(box, 10, replace = TRUE))))+
geom_histogram()
library(ggplot2)
ggplot(data.frame(), aes(((sample(box, 10, replace = TRUE)))), ..density..)+
geom_histogram()
library(ggplot2)
ggplot(data.frame(), aes(((sample(box, 10, replace = TRUE))), ..density..))+
geom_histogram()
replications = replicate(10000, mean((sample(box, 10, replace = TRUE))))
library(ggplot2)
ggplot(data.frame(), aes(replications, ..density..))+
geom_histogram()
mean(replications)
box = c(1, 2, 3, 4, 5, 6)
avg_box = mean(box)
library(ggplot2)
ggplot(data.frame(), aes(((sample(box, 10, replace = TRUE))), ..density..))+
geom_histogram()
replications = replicate(100000, mean((sample(box, 10, replace = TRUE))))
library(ggplot2)
ggplot(data.frame(), aes(replications, ..density..))+
geom_histogram()
box = 1:10
avg_box = mean(box)
library(ggplot2)
ggplot(data.frame(), aes(((sample(box, 10, replace = TRUE))), ..density..))+
geom_histogram()
replications = replicate(100000, mean((sample(box, 10, replace = TRUE))))
library(ggplot2)
ggplot(data.frame(), aes(replications, ..density..))+
geom_histogram()
mean(replications)
knitr::opts_chunk$set(echo = TRUE)
A_sd = 10
B_sd = 18
sqrt(A_sd^2 + B_sd^2)
A_sd = 10
A_se_avg = 10/sqrt(25)
B_sd = 18
B_se_avg = 18/sqrt(36)
sqrt(A_se_avg^2 + B_se_avg^2)
# The observed difference
10.2-8.1 # difference between two sample averages
public_se_avg = 8.5/sqrt(1000)
private_se_avg = 6.9/sqrt(1000)
c(public_se_avg, private_se_avg)
sqrt(public_se_avg^2 + private_se_avg^2)
z_stat = ( (10.2-8.1) - 0) / SE_diff_public_private  #calculate z-stat
knitr::opts_chunk$set(echo = TRUE)
100-50 # expected value of difference
A_sd = 10
A_se_avg = 10/sqrt(25)
B_sd = 18
B_se_avg = 18/sqrt(36)
sqrt(A_se_avg^2 + B_se_avg^2)
# The observed difference
10.2-8.1 # difference between two sample averages
public_se_avg = 8.5/sqrt(1000)
private_se_avg = 6.9/sqrt(1000)
c(public_se_avg, private_se_avg) # public and private se for avg
SE_diff_public_private = sqrt(public_se_avg^2 + private_se_avg^2)
SE_diff_public_private # SE for difference of avg
z_stat = ( (10.2-8.1) - 0) / SE_diff_public_private  #calculate z-stat
z_stat
sqrt(.41*.59)/1000
sqrt(.5*.5)/1000
sqrt(.41*.59)/1000
sqrt(.5*.5)/1000
sqrt(.41*.59)/sqrt(1000)
sqrt(.5*.5)/sqrt(1000)
# SE
sqrt(.41*.59)/sqrt(1000) * 100
sqrt(.5*.5)/sqrt(1000) * 100
# SE
SE_2005 = sqrt(.41*.59)/sqrt(1000) * 100 # 2005 SE
SE_2000 = sqrt(.50*.50)/sqrt(1000) * 100 # 2000 SE
c(SE_2000, SE_2005)
# SE for difference
sqrt(SE_2000^2+SE_2005^2)
(-9-0) / 2.217882
knitr::opts_chunk$set(echo = TRUE)
100-50 # expected value of difference
A_sd = 10
A_se_avg = 10/sqrt(25)
B_sd = 18
B_se_avg = 18/sqrt(36)
sqrt(A_se_avg^2 + B_se_avg^2)
# The observed difference
10.2-8.1 # difference between two sample averages
public_se_avg = 8.5/sqrt(1000)
private_se_avg = 6.9/sqrt(1000)
c(public_se_avg, private_se_avg) # public and private se for avg
SE_diff_public_private = sqrt(public_se_avg^2 + private_se_avg^2)
SE_diff_public_private # SE for difference of avg
z_stat = ( (10.2-8.1) - 0) / SE_diff_public_private  #calculate z-stat
z_stat
1-pvalue(6.0657)
p_val = pnorm((-9-0) / 2.217882)
p_val
1-pnorm(6.0657)
x = c(1, 2, 3, 4, 6, 3,3 ,3, 4, 6, 7)
y = rep(7, 7)
length(x)
x = c(1, 2, 3, 4, 6, 3,3 ,3, 4, 6, 7)
y = rep(7, 11)
cor(x, y)
x = c(1, 2, 3, 4, 6, 3,3 ,3, 4, 6, 7)
y = c(rep(7, 10), 8)
cor(x, y)
x = c(1, 2, 3, 4, 6, 3,3 ,3, 4, 6, 7)
y = rep(7, 11)
cor(x, y)
box = 1:10
avg_box = mean(box)
box = 1:10
avg_box = mean(box)
box
avg_box
sample(box, 10, replace = TRUE)
ggplot(data.frame(), aes(((sample(box, 10, replace = TRUE))), ..density..))+
geom_histogram()
library(ggplot2)
ggplot(data.frame(), aes(((sample(box, 10, replace = TRUE))), ..density..))+
geom_histogram()
replications = replicate(100000, mean((sample(box, 10, replace = TRUE))))
ggplot(data.frame(), aes(replications, ..density..))+
geom_histogram()
knitr::opts_chunk$set(echo = TRUE)
x = c(1, 2, 3)
library(ggplot2)
ggplot(data.frame(), aes(x, ..density..))+
geom_histogram
x = c(1, 2, 3)
library(ggplot2)
ggplot(data.frame(), aes(x, ..density..))+
geom_histogram()
x = c(1, 2, 3)
library(ggplot2)
ggplot(data.frame(), aes(x, ..density..))+
geom_histogram()
pnorm(1.58730159)
1- pnorm(1.58730159)
sample(1:69, 5, replace = F)
sample(1:69, 5, replace = F)
sample(1:69, 5, replace = F)
sample(1:69, 5, replace = F)
sample(1:69, 5, replace = F)
1-pt(1.257079, 8)
1-pt(0.4444,df=8)
pt( 1.4193, 8)
sqrt((0.5655)^2+(0.7055)^2)
(sqrt(400)*(.13*.87))/400*100
(sqrt(400)*(.17*.83))/400*100
sqrt(0.5655^2 + 0.7055^2)
sqrt( .13 * (1-.13) / 400 + .17 * (1-.17) / 400)
(sqrt(400)*sqrt(.17*.83))/400*100
(sqrt(400)*sqrt(.13*.87))/400*100
sqrt(1.878164^2 + 1.681517^2)
sqrt(400*(sqrt(.13*.87)))/400
sqrt(400) * sqrt(.13*.87) / 400
sqrt(400) * sqrT(.17*.83) / 400
sqrt(400) * sqrt(.17*.83) / 400
(sqrt(400)*sqrt(.13*.87)) / 400 * 100
(sqrt(400)*sqrt(.17*.83))/400*100
sqrt(1.681517**2  +  1.878164**2)
1-pnorm(1.59)
1-pnorm(1.6)
1-pnorm(.767)
sqrt(1.68^2 + 1.88^2)
1-pnorm(4.4)
1-pnorm(4.4238)
1-pnorm(1.560)
(1-pnorm(1.560))*2
1-pnorm(1.6)
1-pnorm(1.5873)
0.05622236*2
sqrt(.13 * (1-.13) / 400)
1-pnorm(.1414)
1-pnorm(1.6)
(1-pnorm(1.6))*2
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
x_a = c(1, 1, 2, 3, 3)
y_a = c(0, 6, 5, 6, 8)
A = data.frame(x_a, y_a)
ggplot(A, aes(x_a, y_a)) + geom_point(color = "aquamarine")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
x_a = c(1, 1, 2, 3, 3)
y_a = c(0, 6, 5, 6, 8)
A = data.frame(x_a, y_a)
ggplot(A, aes(x_a, y_a)) + geom_point(color = "aquamarine")
x_b = c(0, 0, 1)
y_b = c(0, 2, 2)
B = data.frame(x_b, y_b)
ggplot(B, aes(x_b, y_b)) + geom_point(color = "red")
x_c = c(0, 1, 2)
y_c = c(0, 1, 4)
C = data.frame(x_c, y_c)
ggplot(C, aes(x_c, y_c)) + geom_point(color = "plum")
x_d = c(0, 1, 2, 2, 3, 4)
y_d = c(2, 3, 0, 4, 1, 2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
x_a = c(1, 1, 2, 3, 3)
y_a = c(0, 6, 5, 6, 8)
A = data.frame(x_a, y_a)
ggplot(A, aes(x_a, y_a)) + geom_point(color = "aquamarine")
x_b = c(0, 0, 1)
y_b = c(0, 2, 2)
B = data.frame(x_b, y_b)
ggplot(B, aes(x_b, y_b)) + geom_point(color = "red")
x_c = c(0, 1, 2)
y_c = c(0, 1, 4)
C = data.frame(x_c, y_c)
ggplot(C, aes(x_c, y_c)) + geom_point(color = "plum")
x_d = c(0, 1, 2, 2, 3, 4)
y_d = c(2, 3, 0, 4, 1, 2)
D = data.frame(x_d, y_d)
ggplot(D, aes(x_d, y_d)) + geom_point(color = "blue")
x_a = c(1, 1, 2, 3, 3)
y_a = c(0, 6, 5, 6, 8)
A = data.frame(x_a, y_a)
ggplot(A, aes(x_a, y_a)) +
geom_point(color = "aquamarine") +
geom_smooth(method = "lm", se = FALSE)
x_b = c(0, 0, 1)
y_b = c(0, 2, 2)
B = data.frame(x_b, y_b)
ggplot(B, aes(x_b, y_b)) +
geom_point(color = "red") +
geom_smooth(method = "lm", se = FALSE)
x_c = c(0, 1, 2)
y_c = c(0, 1, 4)
C = data.frame(x_c, y_c)
ggplot(C, aes(x_c, y_c)) +
geom_point(color = "plum") +
geom_smooth(method = "lm", se = FALSE)
x_d = c(0, 1, 2, 2, 3, 4)
y_d = c(2, 3, 0, 4, 1, 2)
D = data.frame(x_d, y_d)
ggplot(D, aes(x_d, y_d)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", se = FALSE)
75*.5+30
tolower('RECALL THAT THE GOAL IS TO REDUCE THE RMS ERROR BECAUSE THAT LINE WILL MOSTLIKELY FIT THE DATA THE BEST. THE ONE WITH THE RMS ERROR OF 7 SHOULD BE USEDBECAUSE IT WILL BE MORE ACCURATE.')
rm(list = ls())
setwd("~/Desktop/swhui.github.io/StatisticsinPokemon/data-project")
knitr::opts_chunk$set(echo = TRUE)
pokemon = read.csv('../datasets/pokemon.csv')
View(pokemon)
pokemon[, 'attack']
pokemon[, 'attack', 'speed']
pokemon[, c('attack', 'speed')]
colnames(pokemon)
pokemon[, c( "base_total", "hp", "attack", "defense", "sp_attack", "sp_defense", "speed", "name", "is_legendary")]
lm(is_legendary~  "base_total" + "hp" + "attack" + "defense" + "sp_attack" + "sp_defense" + "speed")
lm(is_legendary~  "base_total" + "hp" + "attack" + "defense" + "sp_attack" + "sp_defense" + "speed", data = pokemon)
lm(is_legendary~  "base_total" + "hp" + "attack" + "defense" + "sp_attack" + "sp_defense" + "speed", data = pokemon)
lm(is_legendary~  base_total +
hp + attack + defense + sp_attack + sp_defense + speed,
data = pokemon)
pokemon$speed
length(pokemon$speed)
length(base_total)
length(pokemon$base_total)
lm(is_legendary~  base_total +
hp + attack + defense + sp_attack + sp_defense + speed,
data = pokemon)
summary(lm(is_legendary~  base_total +
hp + attack + defense + sp_attack + sp_defense + speed,
data = pokemon))
summary(lm(is_legendary~
hp + attack + defense + sp_attack + sp_defense + speed,
data = pokemon))
predict_leg = glm(is_legendary~
hp + attack + defense + sp_attack + sp_defense + speed,
data = pokemon, family = "binomial")
summary(lm(is_legendary~
hp + attack + defense + sp_attack + sp_defense + speed,
data = pokemon))
knitr::opts_chunk$set(echo = TRUE)
pokemon = read.csv('../datasets/pokemon.csv')
pokemon = pokemon[, c( "base_total", "hp", "attack", "defense", "sp_attack", "sp_defense", "speed", "name",  "is_legendary")]
library(ggplot2)
ggplot(pokemon, aes(x = base_total, y = is_legendary))+
geom_point()+
geom_line(method = "lm")
summary(lm(is_legendary~
hp + attack + defense + sp_attack + sp_defense + speed,
data = pokemon))
predict_leg = glm(is_legendary~
hp + attack + defense + sp_attack + sp_defense + speed,
data = pokemon, family = "binomial")
knitr::opts_chunk$set(echo = TRUE)
pokemon = read.csv('../datasets/pokemon.csv')
pokemon = pokemon[, c( "base_total", "hp", "attack", "defense", "sp_attack", "sp_defense", "speed", "name",  "is_legendary")]
library(ggplot2)
ggplot(pokemon, aes(x = base_total, y = is_legendary))+
geom_point()+
geom_smooth(method = "lm")
summary(lm(is_legendary~
hp + attack + defense + sp_attack + sp_defense + speed,
data = pokemon))
predict_leg = glm(is_legendary~
hp + attack + defense + sp_attack + sp_defense + speed,
data = pokemon, family = "binomial")
ggplot(pokemon, aes(x = base_total, y = is_legendary))+
geom_point()+
geom_smooth(method = "lm", SE = FALSE)
ggplot(pokemon, aes(x = base_total, y = is_legendary))+
geom_point()+
geom_smooth(method = "lm", se = FALSE)
min(pokemon$base_total)
summary(lm(is_legendary~base_total, data = pokemon))
-4.056e-01 + 1.151e-03 *180
summary(lm(is_legendary~
base_total,
data = pokemon))
ggplot( pokemon , aes(x=base_total, y=is_legendary)) +
geom_point() +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
se = FALSE)
lm_pokemon= (lm(is_legendary~
base_total,
data = pokemon))
summary(lm_pokemon)
glm_simple = glm(is_legendary~
base_total,
data = pokemon, family = "binomial")
knitr::opts_chunk$set(echo = TRUE)
pokemon = read.csv('../datasets/pokemon.csv')
pokemon = pokemon[, c( "base_total", "hp", "attack", "defense", "sp_attack", "sp_defense", "speed", "name",  "is_legendary")]
library(ggplot2)
summary(lm(is_legendary~base_total, data = pokemon))
ggplot(pokemon, aes(x = base_total, y = is_legendary))+
geom_point()+
geom_smooth(method = "lm", se = FALSE)
simple_lm = (lm(is_legendary~
base_total,
data = pokemon))
summary(simple_lm)
glm_simple = glm(is_legendary~
base_total,
data = pokemon, family = "binomial")
ggplot( pokemon , aes(x=base_total, y=is_legendary)) +
geom_point() +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
se = FALSE)
predict(glm_simple, pokemon$base_total, type = "response")
knitr::opts_chunk$set(echo = TRUE)
pokemon = read.csv('../datasets/pokemon.csv')
pokemon = pokemon[, c( "base_total", "hp", "attack", "defense", "sp_attack", "sp_defense", "speed", "name",  "is_legendary")]
library(ggplot2)
summary(lm(is_legendary~base_total, data = pokemon))
ggplot(pokemon, aes(x = base_total, y = is_legendary))+
geom_point()+
geom_smooth(method = "lm", se = FALSE)
lm_simple = (lm(is_legendary~
base_total,
data = pokemon))
summary(lm_simple)
glm_simple = glm(is_legendary~
base_total,
data = pokemon, family = "binomial")
ggplot( pokemon , aes(x=base_total, y=is_legendary)) +
geom_point() +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
se = FALSE)
predict(glm_simple, pokemon$base_total, type = "response")
predict(glm_simple, 180, type = "response")
?predict
predict(glm_simple, pokemon[,"base_total"], type = "response")
predict(glm_simple, data.frame(pokemon[,"base_total"]), type = "response")
predict(glm_simple, data.frame(pokemon$base_total), type = "response")
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
pokemon = read.csv('../datasets/pokemon.csv')
pokemon = pokemon[, c( "base_total", "hp", "attack", "defense", "sp_attack", "sp_defense", "speed", "name",  "is_legendary")]
library(ggplot2)
summary(lm(is_legendary~base_total, data = pokemon))
ggplot(pokemon, aes(x = base_total, y = is_legendary))+
geom_point()+
geom_smooth(method = "lm", se = FALSE)
lm_simple = (lm(is_legendary~
base_total,
data = pokemon))
summary(lm_simple)
glm_simple = glm(is_legendary~
base_total,
data = pokemon, family = "binomial")
ggplot( pokemon , aes(x=base_total, y=is_legendary)) +
geom_point() +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
se = FALSE)
predict(glm_simple, data.frame(pokemon$base_total), type = "response")
View(pokemon)
predict(glm_simple, pokemon, type = "response")
sqrt(mean((predict(glm_simple, pokemon, type = "response") - pokemon$is_legendary)^2))
predict(lm_simple, pokemon, type = "response")
sqrt(mean((predict(lm_simple, pokemon, type = "response") - pokemon$is_legendary)^2))
knitr::opts_chunk$set(echo = TRUE)
pokemon = read.csv('../datasets/pokemon.csv')
pokemon = pokemon[, c( "base_total", "hp", "attack", "defense", "sp_attack", "sp_defense", "speed", "name",  "is_legendary")]
library(ggplot2)
summary(lm(is_legendary~base_total, data = pokemon))
ggplot(pokemon, aes(x = base_total, y = is_legendary))+
geom_point()+
geom_smooth(method = "lm", se = FALSE)
lm_simple = (lm(is_legendary~
base_total,
data = pokemon))
summary(lm_simple)
glm_simple = glm(is_legendary~
base_total,
data = pokemon, family = "binomial")
ggplot( pokemon , aes(x=base_total, y=is_legendary)) +
geom_point() +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
se = FALSE)
sqrt(mean((predict(glm_simple, pokemon, type = "response") - pokemon$is_legendary)^2))
sqrt(mean((predict(lm_simple, pokemon, type = "response") - pokemon$is_legendary)^2))
glm_pokemon = glm(is_legendary~
hp + attack + defense + sp_attack + sp_defense + speed,
data = pokemon, family = "binomial")
sqrt(mean((predict(glm_pokemon, pokemon, type = "response") - pokemon$is_legendary)^2))
